{% extends 'base.html.twig' %}
{% block title %}Générateur de mots de passe{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
/* ——— Variables & Base ——— */
:root {
  --spacing-xs: 8px;
  --spacing-sm: 12px;
  --spacing-md: 16px;
  --spacing-lg: 24px;
  --spacing-xl: 32px;
}

/* ——— Layout ——— */
.page-wrapper {
  display: grid;
  grid-template-columns: 1.6fr 1fr;
  gap: var(--spacing-xl);
  margin: 0 auto;
  animation: fadeIn 0.4s ease-out;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

@media (max-width: 1050px) { 
  .page-wrapper { grid-template-columns: 1fr; } 
}

/* ——— Cards ——— */
.card {
  background: var(--color-white);
  border: 1px solid var(--color-border);
  border-radius: 16px;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.05), 0 2px 4px -1px rgba(0, 0, 0, 0.03);
  overflow: hidden;
  transition: box-shadow 0.3s ease;
}

.card:hover {
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.08), 0 4px 6px -2px rgba(0, 0, 0, 0.04);
}

.card-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 24px 28px;
  background: linear-gradient(135deg, rgba(5, 150, 105, 0.03) 0%, rgba(5, 150, 105, 0.01) 100%);
  border-bottom: 1px solid var(--color-border);
  gap: var(--spacing-md);
}

.card-header-left {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
}

.card-icon {
  width: 40px;
  height: 40px;
  border-radius: 10px;
  background: linear-gradient(135deg, var(--color-primary) 0%, #059669 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 1.1rem;
  box-shadow: 0 4px 12px rgba(5, 150, 105, 0.25);
}

.card-header h1,
.card-header h2 {
  margin: 0;
  font-size: 1.3rem;
  color: var(--color-text-dark);
  font-weight: 800;
  letter-spacing: -0.3px;
}

.card-body {
  padding: 28px;
}

.helper {
  color: var(--color-text-muted);
  font-size: 0.9rem;
  margin-top: 4px;
  line-height: 1.4;
}

/* ——— Password Output ——— */
.password-output-wrapper {
  position: relative;
}

.password-output {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: var(--spacing-md);
  background: linear-gradient(135deg, #f0fdf4 0%, #ecfdf5 100%);
  border: 2px dashed rgba(5, 150, 105, 0.2);
  border-radius: 14px;
  padding: 24px 20px;
  font-size: 1.45rem;
  font-weight: 700;
  color: var(--color-text-dark);
  user-select: all;
  letter-spacing: 0.5px;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.password-output::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(5, 150, 105, 0.1), transparent);
  transition: left 0.5s ease;
}

.password-output.generated::before {
  left: 100%;
}

.password-output:hover {
  border-color: rgba(5, 150, 105, 0.4);
  box-shadow: 0 0 0 4px rgba(5, 150, 105, 0.05);
}

.password-output .mono {
  font-family: ui-monospace, 'SF Mono', 'Cascadia Code', Menlo, monospace;
  flex: 1;
  text-align: center;
  min-height: 28px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.password-actions {
  display: flex;
  gap: 10px;
  flex-shrink: 0;
}

/* ——— Buttons ——— */
.btn {
  border-radius: 10px;
  border: 1px solid var(--color-border);
  padding: 11px 16px;
  font-weight: 700;
  font-size: 0.95rem;
  background: var(--color-bg-light);
  color: var(--color-text-dark);
  cursor: pointer;
  transition: all 0.2s ease;
  display: inline-flex;
  gap: 8px;
  align-items: center;
  justify-content: center;
  white-space: nowrap;
}

.btn:hover {
  background: var(--color-primary-hover);
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
}

.btn:active {
  transform: translateY(0);
}

.btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  transform: none !important;
}

.btn-primary {
  background: linear-gradient(135deg, var(--color-primary) 0%, #059669 100%);
  border-color: transparent;
  color: white;
  box-shadow: 0 4px 12px rgba(5, 150, 105, 0.3);
}

.btn-primary:hover {
  box-shadow: 0 6px 16px rgba(5, 150, 105, 0.4);
  filter: brightness(1.05);
}

.btn-ghost {
  background: transparent;
  border-color: transparent;
}

.btn-ghost:hover {
  background: var(--color-bg-light);
}

.btn-danger {
  border-color: transparent;
  background: linear-gradient(135deg, var(--color-danger-start), var(--color-danger-end));
  color: #fff;
  box-shadow: 0 2px 8px rgba(239, 68, 68, 0.25);
}

.btn-danger:hover {
  box-shadow: 0 4px 12px rgba(239, 68, 68, 0.35);
}

.btn-icon {
  padding: 10px 12px;
  border-radius: 10px;
  min-width: 40px;
}

.btn-icon-danger {
  padding: 8px 10px;
  border-radius: 10px;
  background: #fee2e2;
  border-color: #fecaca;
  color: #b91c1c;
}

.btn-icon-danger:hover {
  background: #fecaca;
  transform: translateY(-1px);
}

/* ——— Divider ——— */
.hr {
  height: 1px;
  background: linear-gradient(90deg, transparent, var(--color-border), transparent);
  margin: 24px 0;
}

/* ——— Controls ——— */
.length-control {
  background: var(--color-bg-light);
  border: 1px solid var(--color-border);
  border-radius: 12px;
  padding: 20px;
  margin-bottom: var(--spacing-lg);
}

.length-control label {
  display: block;
  font-weight: 700;
  color: var(--color-text-dark);
  margin-bottom: var(--spacing-sm);
  font-size: 0.95rem;
}

.range-wrap {
  display: flex;
  align-items: center;
  gap: var(--spacing-md);
}

.range-wrap input[type="range"] {
  flex: 1;
  height: 6px;
  border-radius: 10px;
  background: #e5e7eb;
  outline: none;
  -webkit-appearance: none;
}

.range-wrap input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: linear-gradient(135deg, var(--color-primary) 0%, #059669 100%);
  cursor: pointer;
  box-shadow: 0 2px 8px rgba(5, 150, 105, 0.3);
  transition: all 0.2s ease;
}

.range-wrap input[type="range"]::-webkit-slider-thumb:hover {
  transform: scale(1.15);
  box-shadow: 0 4px 12px rgba(5, 150, 105, 0.4);
}

.range-wrap input[type="range"]::-moz-range-thumb {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: linear-gradient(135deg, var(--color-primary) 0%, #059669 100%);
  cursor: pointer;
  border: none;
  box-shadow: 0 2px 8px rgba(5, 150, 105, 0.3);
}

.badge {
  padding: 8px 14px;
  border-radius: 10px;
  background: white;
  font-weight: 800;
  font-size: 0.95rem;
  color: var(--color-primary);
  border: 2px solid var(--color-primary);
  min-width: 48px;
  text-align: center;
}

.controls {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: var(--spacing-md);
  margin-top: var(--spacing-lg);
}

@media (max-width: 700px) {
  .controls { grid-template-columns: 1fr; }
}

.field {
  background: var(--color-bg-light);
  border: 1px solid var(--color-border);
  border-radius: 12px;
  padding: 16px 18px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: var(--spacing-md);
  transition: all 0.2s ease;
}

.field:hover {
  border-color: rgba(5, 150, 105, 0.3);
  box-shadow: 0 0 0 3px rgba(5, 150, 105, 0.05);
}

.field label {
  font-weight: 700;
  color: var(--color-text-medium);
  font-size: 0.95rem;
  cursor: pointer;
}

/* ——— Switch ——— */
.switch {
  --h: 30px;
  width: 54px;
  height: var(--h);
  border-radius: 999px;
  background: #e5e7eb;
  position: relative;
  cursor: pointer;
  flex-shrink: 0;
  border: 1px solid var(--color-border);
  transition: all 0.3s ease;
}

.switch input {
  display: none;
}

.switch .dot {
  position: absolute;
  top: 50%;
  left: 3px;
  transform: translateY(-50%);
  width: 24px;
  height: 24px;
  border-radius: 50%;
  background: white;
  border: 1px solid var(--color-border);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.switch input:checked + .dot {
  left: 27px;
  background: white;
  border-color: var(--color-primary);
  box-shadow: 0 2px 8px rgba(5, 150, 105, 0.3);
}

.switch:has(input:checked) {
  background: linear-gradient(135deg, var(--color-primary) 0%, #059669 100%);
  border-color: var(--color-primary);
}

/* ——— Strength Meter ——— */
.strength-section {
  margin-top: var(--spacing-lg);
  padding: 20px;
  background: var(--color-bg-light);
  border-radius: 12px;
  border: 1px solid var(--color-border);
}

.meter {
  height: 12px;
  border-radius: 10px;
  background: #eef2f7;
  border: 1px solid var(--color-border);
  overflow: hidden;
  position: relative;
}

.meter > div {
  height: 100%;
  width: 0%;
  transition: width 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  border-radius: 10px;
  position: relative;
  overflow: hidden;
}

.meter > div::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  animation: shimmer 2s infinite;
}

@keyframes shimmer {
  0% { transform: translateX(-100%); }
  100% { transform: translateX(100%); }
}

.meter.weak > div {
  background: linear-gradient(135deg, #fecaca, #f87171);
}

.meter.medium > div {
  background: linear-gradient(135deg, #fde68a, #f59e0b);
}

.meter.strong > div {
  background: linear-gradient(135deg, #bbf7d0, #10b981);
  box-shadow: 0 0 10px rgba(16, 185, 129, 0.4);
}

.meter-label {
  display: flex;
  justify-content: space-between;
  color: var(--color-text-medium);
  font-size: 0.9rem;
  margin-top: 10px;
  font-weight: 600;
}

.meter-label span {
  display: flex;
  align-items: center;
  gap: 6px;
}

/* ——— History ——— */
.switcher {
  display: flex;
  background: var(--color-bg-light);
  border: 1px solid var(--color-border);
  border-radius: 10px;
  overflow: hidden;
  padding: 3px;
}

.switcher button {
  flex: 1;
  padding: 8px 16px;
  border: none;
  background: none;
  cursor: pointer;
  font-weight: 800;
  font-size: 0.9rem;
  color: var(--color-text-medium);
  border-radius: 8px;
  transition: all 0.2s ease;
}

.switcher button:hover:not(.active) {
  background: rgba(5, 150, 105, 0.05);
  color: var(--color-text-dark);
}

.switcher button.active {
  background: linear-gradient(135deg, var(--color-primary) 0%, #059669 100%);
  color: white;
  box-shadow: 0 2px 8px rgba(5, 150, 105, 0.25);
}

.header-actions {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  flex-wrap: wrap;
}

.history-body {
  height: 520px;
  display: flex;
  flex-direction: column;
}

#passwordList {
  flex: 1 1 auto;
  overflow: auto;
  padding-right: 4px;
}

#passwordList::-webkit-scrollbar {
  width: 8px;
}

#passwordList::-webkit-scrollbar-track {
  background: var(--color-bg-light);
  border-radius: 10px;
}

#passwordList::-webkit-scrollbar-thumb {
  background: var(--color-border);
  border-radius: 10px;
}

#passwordList::-webkit-scrollbar-thumb:hover {
  background: #cbd5e1;
}

#historyHint {
  flex: 0 0 auto;
  margin-top: var(--spacing-md);
}

.password-item {
  background: var(--color-bg-light);
  border: 1px solid var(--color-border);
  border-radius: 12px;
  padding: 14px 16px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: var(--spacing-md);
  margin-top: var(--spacing-sm);
  transition: all 0.2s ease;
  animation: slideIn 0.3s ease-out;
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateX(-10px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.password-item:hover {
  border-color: rgba(5, 150, 105, 0.3);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  transform: translateX(2px);
}

.password-item .mono {
  font-family: ui-monospace, 'SF Mono', Menlo, monospace;
  font-size: 0.95rem;
  color: var(--color-text-dark);
  font-weight: 600;
  flex: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.item-actions {
  display: flex;
  gap: 6px;
  flex-shrink: 0;
}

/* ——— Modals ——— */
.modal-backdrop {
  position: fixed;
  inset: 0;
  display: none;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  background: rgba(15, 23, 42, 0.5);
  backdrop-filter: blur(8px);
  animation: fadeInBackdrop 0.2s ease-out;
}

@keyframes fadeInBackdrop {
  from { opacity: 0; }
  to { opacity: 1; }
}

.modal {
  width: 520px;
  max-width: 95%;
  background: white;
  border-radius: 16px;
  border: 1px solid var(--color-border);
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  overflow: hidden;
  animation: modalSlideIn 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

@keyframes modalSlideIn {
  from {
    opacity: 0;
    transform: scale(0.95) translateY(20px);
  }
  to {
    opacity: 1;
    transform: scale(1) translateY(0);
  }
}

.modal header {
  padding: 20px 24px;
  border-bottom: 1px solid var(--color-border);
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: linear-gradient(135deg, rgba(5, 150, 105, 0.03) 0%, rgba(5, 150, 105, 0.01) 100%);
}

.modal header h3 {
  margin: 0;
  font-size: 1.1rem;
  font-weight: 800;
  color: var(--color-text-dark);
}

.modal .content {
  padding: 24px;
}

.modal .content .form-group {
  margin-bottom: 18px;
}

.modal .content .form-group:last-child {
  margin-bottom: 0;
}

.modal .content label {
  display: block;
  font-weight: 700;
  color: var(--color-text-dark);
  margin-bottom: 8px;
  font-size: 0.9rem;
}

.modal .content input {
  width: 100%;
  padding: 12px 14px;
  border-radius: 10px;
  border: 1px solid var(--color-border);
  font-size: 0.95rem;
  transition: all 0.2s ease;
  font-family: inherit;
}

.modal .content input:focus {
  outline: none;
  border-color: var(--color-primary);
  box-shadow: 0 0 0 3px rgba(5, 150, 105, 0.1);
}

.modal footer {
  padding: 16px 24px;
  border-top: 1px solid var(--color-border);
  display: flex;
  justify-content: flex-end;
  gap: var(--spacing-sm);
  background: var(--color-bg-light);
}

/* ——— Toasts ——— */
.toast-wrap {
  position: fixed;
  right: 20px;
  bottom: 20px;
  display: flex;
  flex-direction: column;
  gap: var(--spacing-sm);
  z-index: 1200;
}

.toast {
  background: white;
  border: 1px solid var(--color-border);
  border-left: 4px solid var(--color-success);
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  border-radius: 12px;
  padding: 14px 16px;
  min-width: 300px;
  color: var(--color-text-dark);
  display: flex;
  gap: var(--spacing-sm);
  align-items: flex-start;
  animation: toastSlideIn 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  transition: opacity 0.3s ease;
}

@keyframes toastSlideIn {
  from {
    opacity: 0;
    transform: translateX(100%);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.toast.error {
  border-left-color: var(--color-danger-start);
}

.toast .title {
  font-weight: 800;
  font-size: 0.95rem;
  margin-bottom: 2px;
}

.toast .msg {
  color: var(--color-text-medium);
  font-size: 0.9rem;
  line-height: 1.4;
}

/* ——— Utilities ——— */
.text-center {
  text-align: center;
}

.muted {
  color: var(--color-text-light);
}

:focus-visible {
  outline: 3px solid rgba(5, 150, 105, 0.4);
  outline-offset: 2px;
  border-radius: 8px;
}

/* ——— Responsive ——— */
@media (max-width: 700px) {
  .card-header {
    flex-direction: column;
    align-items: flex-start;
    gap: var(--spacing-sm);
  }
  
  .header-actions {
    width: 100%;
  }
  
  .switcher {
    flex: 1;
  }
  
  .password-output {
    flex-direction: column;
    gap: var(--spacing-sm);
  }
  
  .password-actions {
    width: 100%;
  }
  
  .password-actions .btn {
    flex: 1;
  }
}
</style>
{% endblock %}

{% block body %}
<div class="page-wrapper">

  <!-- ====== Generator ====== -->
  <section class="card">
    <div class="card-header">
      <div class="card-header-left">
        <div class="card-icon">
          <i class="fa-solid fa-key"></i>
        </div>
        <div>
          <h1>Générateur</h1>
          <div class="helper">Créez un mot de passe fort et enregistrez-le.</div>
        </div>
      </div>
    </div>

    <div class="card-body">
      <div class="password-output-wrapper">
        <div class="password-output" aria-live="polite" id="passwordOutputContainer">
          <span class="mono" id="passwordOutput">•••••••••••••</span>
          <div class="password-actions">
            <button class="btn btn-icon" id="copyBtn" title="Copier">
              <i class="fa-solid fa-copy"></i>
            </button>
            <button class="btn btn-primary" id="generateBtn">
              <i class="fa-solid fa-bolt"></i> Générer
            </button>
          </div>
        </div>
      </div>

      <div class="hr"></div>

      <div class="length-control">
        <label for="length">Longueur du mot de passe</label>
        <div class="range-wrap">
          <input type="range" id="length" min="8" max="64" value="12" aria-label="Longueur du mot de passe">
          <span class="badge" id="lengthValue">12</span>
        </div>
      </div>

      <div class="controls">
        <div class="field">
          <label for="uppercase">Majuscules (A-Z)</label>
          <label class="switch" aria-label="Inclure les majuscules">
            <input type="checkbox" id="uppercase" checked><span class="dot"></span>
          </label>
        </div>
        <div class="field">
          <label for="lowercase">Minuscules (a-z)</label>
          <label class="switch" aria-label="Inclure les minuscules">
            <input type="checkbox" id="lowercase" checked><span class="dot"></span>
          </label>
        </div>
        <div class="field">
          <label for="numbers">Chiffres (0-9)</label>
          <label class="switch" aria-label="Inclure les chiffres">
            <input type="checkbox" id="numbers" checked><span class="dot"></span>
          </label>
        </div>
        <div class="field">
          <label for="symbols">Symboles (!@#$...)</label>
          <label class="switch" aria-label="Inclure les symboles">
            <input type="checkbox" id="symbols" checked><span class="dot"></span>
          </label>
        </div>
      </div>

      <div class="strength-section">
        <div class="meter" id="meter"><div></div></div>
        <div class="meter-label">
          <span id="entropyLabel">
            <i class="fa-solid fa-shield-halved"></i>
            Entropie : —
          </span>
          <span id="strengthLabel">Force : —</span>
        </div>
      </div>
    </div>
  </section>

  <!-- ====== History ====== -->
  <aside class="card">
    <div class="card-header">
      <div class="card-header-left">
        <div class="card-icon">
          <i class="fa-solid fa-clock-rotate-left"></i>
        </div>
        <div>
          <h2>Historique</h2>
          <div class="helper">Gérez vos mots de passe</div>
        </div>
      </div>
      <div class="header-actions">
        <div class="switcher" role="tablist" aria-label="Liste des mots de passe">
          <button id="recentBtn" class="active" role="tab" aria-selected="true">
            <i class="fa-solid fa-clock"></i> Récents
          </button>
          <button id="savedBtn" role="tab" aria-selected="false">
            <i class="fa-solid fa-bookmark"></i> Enregistrés
          </button>
        </div>
        <button id="clearAllBtn" class="btn btn-icon btn-icon-danger" title="Tout supprimer (Récents)">
          <i class="fa-solid fa-trash"></i>
        </button>
      </div>
    </div>
    <div class="card-body history-body">
      <div id="passwordList"></div>
      <p class="helper text-center" id="historyHint">
        <i class="fa-solid fa-info-circle"></i>
        Les éléments récents sont stockés localement 48h.
      </p>
    </div>
  </aside>
</div>

<!-- ====== Modal Convert ====== -->
<div class="modal-backdrop" id="convertModal" aria-hidden="true" aria-labelledby="cTitle" role="dialog">
  <div class="modal" role="document">
    <header>
      <h3 id="cTitle"><i class="fa-solid fa-right-long"></i> Convertir en Credential</h3>
      <button class="btn btn-ghost" data-modal-close aria-label="Fermer">
        <i class="fa-solid fa-xmark"></i>
      </button>
    </header>
    <div class="content">
      <div class="form-group">
        <label for="credName"><i class="fa-solid fa-tag"></i> Nom</label>
        <input type="text" id="credName" placeholder="Ex: Mon compte GitHub">
      </div>
      <div class="form-group">
        <label for="credDomain"><i class="fa-solid fa-globe"></i> Domaine</label>
<input type="text" id="credDomain" placeholder="ex : github.com">
</div>
<div class="form-group">
<label for="credUsername"><i class="fa-solid fa-user"></i> Identifiant / email</label>
<input type="text" id="credUsername" placeholder="votre@email.com">
</div>
</div>
<footer>
<button class="btn" data-modal-close>Annuler</button>
<button id="confirmConvert" class="btn btn-primary">
<i class="fa-solid fa-check"></i> Convertir
</button>
</footer>
  </div>
</div>
<!-- ====== Modal Save Draft ====== -->
<div class="modal-backdrop" id="saveModal" aria-hidden="true" aria-labelledby="sTitle" role="dialog">
  <div class="modal" role="document">
    <header>
      <h3 id="sTitle"><i class="fa-solid fa-floppy-disk"></i> Enregistrer en brouillon</h3>
      <button class="btn btn-ghost" data-modal-close aria-label="Fermer">
        <i class="fa-solid fa-xmark"></i>
      </button>
    </header>
    <div class="content">
      <div class="form-group">
        <label for="saveName"><i class="fa-solid fa-pencil"></i> Nom du mot de passe</label>
        <input type="text" id="saveName" placeholder="Ex: Compte GitHub">
      </div>
    </div>
    <footer>
      <button class="btn" data-modal-close>Annuler</button>
      <button id="confirmSave" class="btn btn-primary">
        <i class="fa-solid fa-check"></i> Enregistrer
      </button>
    </footer>
  </div>
</div>
<!-- ====== Modal Confirm (clear all) ====== -->
<div class="modal-backdrop" id="confirmModal" aria-hidden="true" aria-labelledby="confirmTitle" role="dialog">
  <div class="modal" role="document">
    <header>
      <h3 id="confirmTitle"><i class="fa-solid fa-triangle-exclamation"></i> Tout supprimer ?</h3>
      <button class="btn btn-ghost" data-modal-close aria-label="Fermer">
        <i class="fa-solid fa-xmark"></i>
      </button>
    </header>
    <div class="content">
      <p>Cette action efface définitivement les éléments <strong>Récents</strong> stockés localement.</p>
      <p class="helper">Cette action est irréversible.</p>
    </div>
    <footer>
      <button class="btn" data-modal-close>Annuler</button>
      <button id="confirmClearAll" class="btn btn-danger">
        <i class="fa-solid fa-trash"></i> Supprimer tout
      </button>
    </footer>
  </div>
</div>
<!-- Toasts -->
<div class="toast-wrap" id="toastWrap" aria-live="polite" aria-atomic="true"></div>
<script>
/* ===== Refs ===== */
const outputEl = document.getElementById('passwordOutput');
const outputContainer = document.getElementById('passwordOutputContainer');
const list = document.getElementById('passwordList');
const recentBtn = document.getElementById('recentBtn');
const savedBtn  = document.getElementById('savedBtn');
const clearAllBtn = document.getElementById('clearAllBtn');
const meter = document.getElementById('meter');
const meterBar = meter.querySelector('div');
const entropyLabel = document.getElementById('entropyLabel');
const strengthLabel = document.getElementById('strengthLabel');
const lengthInput = document.getElementById('length');
const lengthValue = document.getElementById('lengthValue');
const toastWrap = document.getElementById('toastWrap');

let recentPasswords = loadRecentPasswords();
let currentDraftId = null;
let pendingSavePassword = null;

/* ===== Utils ===== */
const Toast = (type, title, msg) => {
  const el = document.createElement('div');
  el.className = 'toast' + (type==='error' ? ' error':'');
  el.innerHTML = `<div><div class="title">${title}</div><div class="msg">${msg}</div></div>`;
  toastWrap.appendChild(el);
  setTimeout(()=>{ el.style.opacity='.6' }, 2500);
  setTimeout(()=>{ el.remove() }, 4200);
};

const openModal = (id) => {
  const m = document.getElementById(id);
  m.style.display='flex'; m.setAttribute('aria-hidden','false');
  const focusable = m.querySelector('input,button'); focusable && focusable.focus();
  const onEsc = (e)=>{ if(e.key==='Escape') closeModal(id, onEsc); };
  m.dataset.esc = true; document.addEventListener('keydown', onEsc);
  m.addEventListener('click', (e)=>{ if(e.target===m) closeModal(id, onEsc) });
  m.querySelectorAll('[data-modal-close]').forEach(btn => btn.onclick=()=>closeModal(id, onEsc));
};
const closeModal = (id, escHandler) => {
  const m = document.getElementById(id);
  m.style.display='none'; m.setAttribute('aria-hidden','true');
  if(escHandler){ document.removeEventListener('keydown', escHandler); }
};

function entropy(bits){ return Math.round(bits*10)/10; }
function updateMeter(pwd, pool) {
  if(!pwd){ 
    meter.className='meter'; 
    meterBar.style.width='0%'; 
    entropyLabel.innerHTML='<i class="fa-solid fa-shield-halved"></i> Entropie : —'; 
    strengthLabel.textContent='Force : —'; 
    return; 
  }
  const H = Math.log2(pool) * pwd.length;
  const e = entropy(H);
  entropyLabel.innerHTML = `<i class="fa-solid fa-shield-halved"></i> Entropie : ${e} bits`;
  let strength='weak', pct=25;
  if(e>=60){ strength='strong'; pct=100; }
  else if(e>=45){ strength='medium'; pct=65; }
  else if(e>=30){ strength='medium'; pct=45; }
  else { strength='weak'; pct=25; }
  meter.className = 'meter ' + strength;
  meterBar.style.width = pct+'%';
  strengthLabel.textContent = 'Force : ' + (strength==='strong'?'Forte':strength==='medium'?'Moyenne':'Faible');
}

function saveRecentPasswords(){ localStorage.setItem('recentPasswords', JSON.stringify(recentPasswords)); }
function loadRecentPasswords(){
  const data = localStorage.getItem('recentPasswords'); if(!data) return [];
  try{
    const parsed = JSON.parse(data);
    const now = Date.now();
    const valid = parsed.filter(p => now - p.createdAt < 48*3600*1000);
    if(valid.length !== parsed.length) localStorage.setItem('recentPasswords', JSON.stringify(valid));
    return valid;
  }catch{ return []; }
}
function addRecentPassword(password){
  const now=Date.now(); recentPasswords.unshift({ password, createdAt: now });
  if(recentPasswords.length>12) recentPasswords.pop();
  saveRecentPasswords();
}

/* ===== Generation ===== */
function getCharPools(){
  return { upper:"ABCDEFGHIJKLMNOPQRSTUVWXYZ", lower:"abcdefghijklmnopqrstuvwxyz", nums:"0123456789", syms:"!@#$%^&*()_+-=[]{};:,.<>/?" };
}
function secureRandom(max){ const buf = new Uint32Array(1); crypto.getRandomValues(buf); return buf[0] % max; }
function generatePassword(){
  const len = +lengthInput.value;
  const pools = getCharPools();
  const opts = {
    upper: document.getElementById('uppercase').checked,
    lower: document.getElementById('lowercase').checked,
    nums:  document.getElementById('numbers').checked,
    syms:  document.getElementById('symbols').checked
  };
  let chars = ''; Object.entries(opts).forEach(([k,v])=>{ if(v) chars+=pools[k]; });
  if(!chars){ Toast('error','Options requises','Sélectionnez au moins un type de caractère.'); return; }

  let pwdArr = [];
  Object.entries(opts).forEach(([k,v])=>{ if(v) pwdArr.push(pools[k][secureRandom(pools[k].length)]); });
  while(pwdArr.length < len){ pwdArr.push(chars[secureRandom(chars.length)]); }
  for(let i=pwdArr.length-1;i>0;i--){ const j = secureRandom(i+1); [pwdArr[i],pwdArr[j]] = [pwdArr[j],pwdArr[i]]; }
  const pwd = pwdArr.join('');

  outputEl.textContent = pwd;
  outputContainer.classList.add('generated');
  setTimeout(() => outputContainer.classList.remove('generated'), 500);
  
  addRecentPassword(pwd);
  if (recentBtn.classList.contains('active')) renderRecent();
  updateMeter(pwd, chars.length);
}

/* ===== Renderers ===== */
function renderRecent(){
  list.innerHTML='';
  if(recentPasswords.length===0){
    list.innerHTML = "<p class='text-center muted'><i class='fa-solid fa-inbox'></i><br><br>Aucun mot de passe généré</p>";
    return;
  }
  recentPasswords.forEach((obj)=>{
    const el = document.createElement('div');
    el.className = 'password-item';
    el.innerHTML = `
      <div class="mono">${escapeHtml(obj.password)}</div>
      <div class="item-actions">
        <button class="btn btn-icon" data-copy="${escapeHtml(obj.password)}" title="Copier">
          <i class="fa-solid fa-copy"></i>
        </button>
        <button class="btn btn-icon" data-save="${escapeHtml(obj.password)}" title="Enregistrer en brouillon">
          <i class="fa-solid fa-floppy-disk"></i>
        </button>
        <button class="btn btn-icon-danger" data-delete="${obj.createdAt}" title="Supprimer">
          <i class="fa-solid fa-xmark"></i>
        </button>
      </div>
    `;
    list.appendChild(el);
  });
}

async function renderDrafts(){
  list.innerHTML = "<p class='text-center muted'><i class='fa-solid fa-spinner fa-spin'></i><br><br>Chargement…</p>";
  try{
    const res = await fetch('{{ path('app_generator_list_drafts') }}');
    const j = await res.json();
    list.innerHTML = '';
    if(!j.drafts?.length){
      list.innerHTML = "<p class='text-center muted'><i class='fa-solid fa-inbox'></i><br><br>Aucun brouillon</p>";
      return;
    }
    j.drafts.forEach(d=>{
      const el = document.createElement('div');
      el.className='password-item';
      el.innerHTML = `
        <div class="mono">${escapeHtml(d.name)}</div>
        <div class="item-actions">
          <button class="btn btn-icon" data-convert data-id="${d.id}" data-pass="${escapeHtml(d.password)}" data-name="${escapeHtml(d.name)}" title="Convertir en credential">
            <i class="fa-solid fa-right-long"></i>
          </button>
          <button class="btn btn-icon" data-copy="${escapeHtml(d.password)}" title="Copier">
            <i class="fa-solid fa-copy"></i>
          </button>
        </div>
      `;
      list.appendChild(el);
    });
  }catch(e){
    list.innerHTML = "<p class='text-center' style='color:var(--color-danger-start)'><i class='fa-solid fa-triangle-exclamation'></i><br><br>Impossible de charger les brouillons.</p>";
  }
}

/* ===== Delete helpers ===== */
function deleteRecent(ts){
  const before = recentPasswords.length;
  recentPasswords = recentPasswords.filter(p => p.createdAt !== +ts);
  saveRecentPasswords();
  if(before !== recentPasswords.length){
    renderRecent();
    Toast('success','Supprimé','Élément retiré des récents.');
  }
}
function clearAllRecents(){
  recentPasswords = [];
  saveRecentPasswords();
  renderRecent();
  Toast('success','Nettoyage terminé','Tous les récents ont été supprimés.');
}

/* ===== Events ===== */
document.getElementById('generateBtn').onclick = generatePassword;
document.getElementById('copyBtn').onclick = async () => {
  const p = outputEl.textContent.trim();
  if(!p || p.startsWith('•')) return;
  await navigator.clipboard.writeText(p);
  Toast('success','Copié','Mot de passe copié dans le presse-papiers.');
};
lengthInput.addEventListener('input', ()=>{ lengthValue.textContent = lengthInput.value; });

document.querySelector('.card-body').addEventListener('change', ()=>{
  const current = outputEl.textContent;
  const pools = getCharPools();
  const opts = {
    upper: document.getElementById('uppercase').checked,
    lower: document.getElementById('lowercase').checked,
    nums:  document.getElementById('numbers').checked,
    syms:  document.getElementById('symbols').checked
  };
  let chars=''; Object.entries(opts).forEach(([k,v])=>{ if(v) chars+=pools[k]; });
  if(current && !current.startsWith('•') && chars) updateMeter(current, chars.length);
  else updateMeter('', 0);
});

/* Liste actions */
list.addEventListener('click', async (e)=>{
  const copyBtn = e.target.closest('[data-copy]');
  const saveBtn = e.target.closest('[data-save]');
  const convertBtn = e.target.closest('[data-convert]');
  const delBtn = e.target.closest('[data-delete]');

  if(copyBtn){
    await navigator.clipboard.writeText(copyBtn.getAttribute('data-copy'));
    Toast('success','Copié','Mot de passe copié.');
  }
  if(saveBtn){
    pendingSavePassword = saveBtn.getAttribute('data-save');
    document.getElementById('saveName').value = '';
    openModal('saveModal');
  }
  if(convertBtn){
    const b = convertBtn;
    currentDraftId = b.getAttribute('data-id');
    document.getElementById('credName').value = b.getAttribute('data-name') || '';
    document.getElementById('credDomain').value = '';
    document.getElementById('credUsername').value = '';
    openModal('convertModal');
  }
  if(delBtn){
    deleteRecent(delBtn.getAttribute('data-delete'));
  }
});

/* Tabs */
recentBtn.onclick = ()=>{
  recentBtn.classList.add('active'); recentBtn.setAttribute('aria-selected','true');
  savedBtn.classList.remove('active'); savedBtn.setAttribute('aria-selected','false');
  clearAllBtn.disabled = false;
  renderRecent();
};
savedBtn.onclick  = ()=>{
  savedBtn.classList.add('active'); savedBtn.setAttribute('aria-selected','true');
  recentBtn.classList.remove('active'); recentBtn.setAttribute('aria-selected','false');
  clearAllBtn.disabled = true;
  renderDrafts();
};

/* Save Draft */
document.getElementById('confirmSave').onclick = async () => {
  const name = document.getElementById('saveName').value?.trim();
  if (!name) {
    Toast('error', 'Nom requis', "Merci d'indiquer un nom.");
    return;
  }
  try {
    await fetch('{{ path('app_generator_save_draft') }}', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ name, password: pendingSavePassword })
    });
    closeModal('saveModal');
    Toast('success', 'Brouillon enregistré', 'Vous le trouverez dans l’onglet Enregistrés.');
    if (savedBtn.classList.contains('active')) renderDrafts();
  } catch (e) {
    Toast('error', 'Échec', "Impossible d'enregistrer le brouillon.");
  }
};


/* Convert draft */
document.getElementById('confirmConvert').onclick = async ()=>{
  const payload = {
    draftId: currentDraftId,
    name: document.getElementById('credName').value,
    domain: document.getElementById('credDomain').value,
    username: document.getElementById('credUsername').value
  };
  try{
    const res = await fetch('{{ path('app_generator_convert_draft') }}', {
      method: 'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload)
    });
    const j = await res.json();
    if(j.success){
      closeModal('convertModal');
      Toast('success','Conversion réussie','Le brouillon a été converti en credential.');
      renderDrafts();
    }else{
      Toast('error','Erreur', j.error || 'Une erreur est survenue.');
    }
  }catch(e){ Toast('error','Erreur réseau','Vérifiez votre connexion.'); }
};

/* Clear all récents */
clearAllBtn.onclick = ()=>{
  if(savedBtn.classList.contains('active')) return;
  openModal('confirmModal');
};
document.getElementById('confirmClearAll').onclick = ()=>{
  clearAllRecents();
  closeModal('confirmModal');
};

/* Utils */
function escapeHtml(str){ return str ? String(str).replace(/[&<>"']/g,(t)=>({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"}[t])) : ""; }

/* Init */
lengthValue.textContent = lengthInput.value;
renderRecent();
updateMeter('',0);
clearAllBtn.disabled = false;
</script>
{% endblock %}